// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AttendanceMode {
  Manual
  Geolocation
}

model Companies {
  id              String    @id @default(uuid())
  name            String
  image           String
  email           String    @unique
  password        String
  emailVerifiedAt DateTime?
  officeLatitude  Float?
  officeLongitude Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CompanyOtp CompanyOtp?
  Employees  Employees[]
  Attendance Attendance[]
}

model CompanyOtp {
  id  String @id @default(uuid())
  otp Int

  expires   DateTime
  createdAt DateTime @default(now())

  companyEmail String    @unique
  company      Companies @relation(references: [email], fields: [companyEmail], onDelete: Cascade)
}

model Employees {
  id          String @id @default(uuid())
  name        String
  image       String
  email       String @unique
  password    String
  designation String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyEmail String
  company      Companies @relation(references: [email], fields: [companyEmail], onDelete: Cascade)

  EmployeeOtp EmployeeOtp?
  Attendance  Attendance[]
}

model EmployeeOtp {
  id  String @id @default(uuid())
  otp Int

  expires   DateTime
  createdAt DateTime @default(now())

  employeeEmail String    @unique
  employee      Employees @relation(references: [email], fields: [employeeEmail], onDelete: Cascade)
}

model Attendance {
  id        String         @id @default(uuid())
  date      Int
  month     Int
  year      Int
  mode      AttendanceMode
  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeEmail String
  employee      Employees @relation(references: [email], fields: [employeeEmail], onDelete: Cascade)
  companyEmail  String
  company       Companies @relation(references: [email], fields: [companyEmail], onDelete: Cascade)

  EmployeeEntry EmployeeEntry[]

  @@unique([employeeEmail, companyEmail, date, month, year])
  @@index([date, month, year])
}

model EmployeeEntry {
  id        String   @id @default(uuid())
  enteredAt DateTime

  attendanceId   String
  attendance     Attendance    @relation(references: [id], fields: [attendanceId], onDelete: Cascade)
  employeeExitId String?
  EmployeeExit   EmployeeExit?
}

model EmployeeExit {
  id       String   @id @default(uuid())
  exitedAt DateTime

  entryId       String        @unique
  employeeEntry EmployeeEntry @relation(references: [id], fields: [entryId], onDelete: Cascade)
}
